#!/usr/bin/env python3
'''
Runs rtlamr to watch for IDM broadcasts from power meter. If meter id
is in the list, usage is sent to MQTT broker.

WATCHED_METERS = A Python list indicating those meter IDs to record and post.
MQTT_HOST = String containing the MQTT server address.
MQTT_PORT = An int containing the port the MQTT server is active on.

Frequency: 912 MHz
Total Optimal Antenna Length ("L"): 6.1 Inches
Element Length (Half Dipole) ("E"): 3.1 Inches

'''

import subprocess
import signal
import sys
import os
import time
import requests
import paho.mqtt.publish as publish
import settings
import logging
import logging.handlers

from typing import Union, Optional, Dict, List

# Logging setup
logger = logging.getLogger("rtlamr2mqtt")
logger.setLevel(logging.INFO)

syslog_handler = logging.handlers.SysLogHandler(address='/dev/log')
formatter = logging.Formatter('%(name)s: %(levelname)s %(message)s')
syslog_handler.setFormatter(formatter)
logger.addHandler(syslog_handler)

# Constants
HC_SECONDS_INTERVAL = 5 * 60  # Health check interval in seconds
HC_URL = 'https://hc-ping.com/887eec44-d131-4802-a4d9-0d69876cb9ce'
PROCESS_LIST = ['rtlamr', 'rtl_tcp', 'rtlamr2mqtt']
STARTUP_DELAY = 5  # Seconds to wait before starting processes
RETRY_DELAY = 2  # Seconds to wait after an error before retrying

# Field indices in the CSV output
class MeterFields:
    TIME = 0
    ID = 3
    WATER_NO_USE = 5
    WATER_BACKFLOW = 6
    CONSUMPTION = 7
    WATER_LEAK = 9
    WATER_LEAK_NOW = 10

def shutdown(signum: int, frame: object) -> None:
    """Shutdown handler to terminate processes."""
    logger.info("Shutdown signal received. Exiting.")
    for process in ['rtlamr', 'rtl_tcp', 'rtlamr2mqtt']:
        subprocess.call(f'/usr/bin/pkill -9 {process}', shell=True)
    sys.exit(0)



def send_mqtt(topic: str, payload: str, auth: Optional[Dict[str, str]]) -> None:
    """Send MQTT message to the configured broker.
    
    Args:
        topic: MQTT topic to publish to
        payload: Message payload
        auth: Optional authentication dictionary with username and password
    """
    try:
        publish.single(topic, payload=payload, qos=1,
                       hostname=settings.MQTT_HOST, port=settings.MQTT_PORT, auth=auth)
    except Exception as ex:
        logger.error(f"MQTT Publish Failed: {ex}")

def start_process(command: Union[List[str], str], shell: bool = False) -> subprocess.Popen:
    """Start a subprocess with proper error handling.
    
    Args:
        command: Command to execute, either as a list of arguments or shell command
        shell: Whether to run the command through the shell
        
    Returns:
        Popen: A subprocess.Popen object for the started process
        
    Raises:
        subprocess.SubprocessError: If the process fails to start
    """
    try:
        process = subprocess.Popen(
            command, 
            shell=shell, 
            stdin=None, 
            stdout=subprocess.PIPE if not shell else None,
            stderr=subprocess.PIPE if not shell else None,
            close_fds=True
        )
        logger.info(f"Started process: {command if isinstance(command, str) else ' '.join(command)}")
        return process
    except subprocess.SubprocessError as e:
        logger.error(f"Failed to start process {command}: {e}")
        raise

def process_water_meter(line_fields: List[str], auth: Optional[Dict[str, str]]) -> None:
    """Process water meter data and send MQTT messages.
    
    Args:
        line_fields: CSV fields from rtlamr output
        auth: MQTT authentication credentials
    """
    try:
        meter_id = line_fields[MeterFields.ID]
        water_data = {
            'NoUse': line_fields[MeterFields.WATER_NO_USE],
            'BackFlow': line_fields[MeterFields.WATER_BACKFLOW],
            'TotalValue': str(float(line_fields[MeterFields.CONSUMPTION]) / 10),
            'LeakDetected': line_fields[MeterFields.WATER_LEAK],  # This stays on for a few weeks after a leak
            'LeakNowDetected': line_fields[MeterFields.WATER_LEAK_NOW]
        }
        for key, value in water_data.items():
            send_mqtt(f'Home/WaterMeter/{key}', value, auth)
            logger.info(f"Water Meter {meter_id} {key}: {value}")
    except (IndexError, ValueError) as e:
        logger.error(f"Error processing water meter data: {e}, Fields: {line_fields}")

def process_gas_meter(line_fields: List[str], auth: Optional[Dict[str, str]]) -> None:
    """Process gas meter data and send MQTT messages.
    
    Args:
        line_fields: CSV fields from rtlamr output
        auth: MQTT authentication credentials
    """
    try:
        meter_id = line_fields[MeterFields.ID]
        consumption = line_fields[MeterFields.CONSUMPTION]
        send_mqtt('Home/GasMeterTotalValue', consumption, auth)
        logger.info(f"Gas Meter {meter_id}: {consumption}")
    except (IndexError, ValueError) as e:
        logger.error(f"Error processing gas meter data: {e}, Fields: {line_fields}")

def health_check():
    """Perform health check."""
    try:
        response = requests.get(HC_URL)
        if 'OK' in response.text:
            logger.info("Good UtilityMeterCheck Health Check")
        else:
            logger.warning("BAD UtilityMeterCheck Health Check")
    except Exception as ex:
        logger.error(f"Health Check Failed: {ex}")

# Main script
if __name__ == "__main__":
    try:
        signal.signal(signal.SIGTERM, shutdown)
        signal.signal(signal.SIGINT, shutdown)

        auth = {'username': settings.MQTT_USER, 'password': settings.MQTT_PASSWORD} if settings.MQTT_USER and settings.MQTT_PASSWORD else None

        time.sleep(STARTUP_DELAY)
        rtltcp = start_process([settings.RTL_TCP + " > /dev/null 2>&1 &"], shell=True)
        time.sleep(STARTUP_DELAY)
        
        rtlamr_cmd = [
            os.path.expanduser(settings.RTLAMR),
            '-msgtype=scm,r900',
            f'-filterid={",".join(settings.WATCHED_METERS)}',
            '-format=csv'
        ]
        rtlamr = start_process(rtlamr_cmd)

        hc_previous_seconds = time.time() - HC_SECONDS_INTERVAL  # Ensure first health check happens soon

        logger.info('Starting main processing loop')

        while True:
            try:
                # rtlamr output format examples:
                # Water: '2023-03-12T12:29:39.41563046-04:00,0,0,701279268,131,36,0,156864,0,0,0'
                # Gas: '2023-03-12T12:28:31.026929668-04:00,0,0,48558014,12,0x3,0x0,572332,0xcc8e'
                if rtlamr.stdout is None:
                    raise RuntimeError("rtlamr process stdout is None")
                    
                amr_line = rtlamr.stdout.readline()
                if not amr_line:  # EOF
                    raise RuntimeError("rtlamr process ended unexpectedly")
                    
                line_fields = amr_line.strip().decode().split(',')
                meter_id = line_fields[MeterFields.ID]

                if len(line_fields) == 11 and meter_id in settings.WATCHED_METERS:
                    process_water_meter(line_fields, auth)
                elif len(line_fields) == 9 and meter_id in settings.WATCHED_METERS:
                    process_gas_meter(line_fields, auth)
                elif meter_id:  # Only log if we got a valid meter ID
                    logger.warning(f'Received unknown meter ID: {meter_id}')
            except Exception as ex:
                logger.error(f"Error processing rtlamr output: {ex}")
                time.sleep(RETRY_DELAY)
            
            # Perform health check every HC_SECONDS_INTERVAL seconds
            try:
                hc_current_seconds = time.time()
                if hc_current_seconds - hc_previous_seconds > HC_SECONDS_INTERVAL or hc_current_seconds < hc_previous_seconds:
                    health_check()
                    hc_previous_seconds = hc_current_seconds
            except Exception as ex:
                logger.error(f"Error processing health check: {ex}")
                time.sleep(2)

    except Exception as ex:
        logger.error(f"Fatal error: {ex}")
        time.sleep(2)
        sys.exit(1)
        